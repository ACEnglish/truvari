I can use chunker, don't need file_zipper

I can use Matcher, all those params are the same
# consider pulling out the shared arguments so I 
# just send from each prog the argparser and get
# the stuff added. Easy enough.

I don't need collapentry anymore. I'll just take 
the Base for one of a set and the rest can go to
collapse.


For each chunk, all against all. 
Note that I only need the top diagonal since it'll be symmetrical
So I i can reuse chunker, but I don't reuse chunk_compare

  1 2 3 4 5 6 7
1 - T T F F T T
2   - T F F F T
3     - F T T F
4       - F F F
5         - T T
6           - T
7             -

1 & 2
2 & 3
1 & 3
----- these collapse without chain

4 is by itself

Well - we also have this picking strategy.

So, imagine we take the FIRST. So we sort them by position.
Then, we take the first one, and collapse anything it matches with
 -- lets ignore chain for now.
Then we look at the next one which we haven't already used,
pick it and go


Say we want most common - sort by most common.
Then we take the most common one. And collapse anything it matches with.
Same as before.

We're going to need extra matching checks on stuff for --hap.
That'll just be setting state=False for anything that's on the same haplotype

For chain, once we get a match (from the sorted, we have to then go to that call and
Find everyone its matching
And find everyone they're matching
and recursive


A big part of this refactor is getting INV working.
I think I just need to get comparisons to work
	So sequence - just get the alt
	Size - I need to just get the length  (or read the ALT or whatever)
	I left the SVLEN alone in my stuff, so those need to be reset... dangit

I gotta add test cases to this feature on INV.
I'll send a set of inversions that I find to a file to run through collapse
And I'll have the inversions be on different chromosomes so I don't ever drop that again...

Okay - I think I understand what to do about --hap and --chain and --choose.
I think I get to reuse matcher
- I add a check after the matcher for hap
- I need a recursive method for --chain.. or... there might be something here. lets see what 
I think of.

- And --choose will be how I sort them. I'm pretty much reimplementing the pick_single_matches
but with custom by choose
lambda: cmp will probably be fine

- This will give an opportunity to update how we edit_entries.
NumCollapsed is very good.
MatchId is very good.
The collapsed calls can hold the metrics of how similar they were

Note that for this, I'm going to be doing base to the output and comp to the collapsed

Hmmm... so... I need to.. account for whats in the code right now

Remove CollapEntry and MatchEntry - dumb



# Trash code
find_neighbors is replaced by a chunker - so can pretty much remove it
match_calls - Remove, nothing special that's not in Matcher anymore

reuse chunker and matcher

new a new compare chunk
	build matrix
	if hap will do the extra check
	for the matrix, ravel and sort by the --keep selection
	for each in matrix,
		if base is None:
			this is a collapse
		if its the first time seeing the entry, output it
		leave its base 
		put the comp into to_collapse.add(str(entry))
		if --chain:
			chain_calls()

def chain_calls():
	given an entry,
	for every hit in the matrix that has this entry as the base
	if its state is True
	Set it to be output to collapse, and do the same chain_calls on this comp.
	Just sets all the bases to None?

hap_resolve - 
	Good checker for the --hap mode extra checker

select_best - need to rework so it sorts
select_maxqual - need to rework so it sorts
select_common - need to rework so it sorts

# VCF editing
output_edit_header / collapse_edit_header 
	This just needs to be edit_header?
	Though I am going to have different metrics - 
	Actually I use bench.edit_header for the collapse header
	And I use a collapse.edit_header for this here and my new stuff
setup_outputs / close_outputs
edit_collap_entry - edit_output_entry
	Can simplify this
	Particularally around the format field collapsing
	And honestly I probably need to pull that into its own method

# Arguments
parse_args()
	make a separate thing to make the thresg argument group?
check_params /  - fine

collapse_main
	Simplify once I get the pieces


collapse_chunk:
    Sort calls in the chunk by the --keep sorter
    lookup = {} # kept_key: [mainMatch, collapsed_matches]
    is_collapsed = {} # comp_call: kept_key
    while len(match_array) > 1:
        pop the first thing
        make a kept_key out of it
        match it to all the rest
        
        if they match,
            they will become collapse (mat.base = None
            Add them to lookup[key][1]
            if not chain:
                I can also remove them from the match array
            else:
                # to chain backwards
                in_collapsed[comp_key] = kept_key

        if chain and not kept_key is in is_collapsed:
            ret[kept_key][1].append((kept, collapsed))
    return list of popped things with their matches
