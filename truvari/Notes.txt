I want to tie the actual annotator to the annotation source.

I'll require that:
	There is an object that just simply has a 'annotate' method that consumes a pysam VCF Entry.
	The object also needs a 'get_vcf_header' to add the needed header INFO/source lines

I'll create 'matching' operators that will help you build the annotation source. Reusable
I'll have 'configs' for what the matching parameters are so those are customizable? Or I can just set that up on the
object annotation.set_config of all those pieces

And I want a way to dump the info on how they match? Allow parameters to pass to the annotation source?

Then I'll document the procedure to build the object, and then save it as a pickle so you don't need 
to re-load it all the time. 

Then the `truvari anno` will take a vcf and then a list of the pickles that will be called, in order, on each entry in
the VCF

I know reusing the bedtools and bcftools would be easier, but I want more control over it so we can make more refined
comparisons



